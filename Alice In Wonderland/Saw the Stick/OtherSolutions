def checkio(data):
    triangular = []
    n = 0
    i = 1

    #make a list of Triangular numbers smaller than data
    while n < data:
        n += i
        i += 1
        if n < data:
            triangular.append(n)

    #Test all the numbers start from the longest possibility
    for j in range(len(triangular),0,-1):
        i = 0
        while i+j < len(triangular):
            if sum(triangular[i:i+j+1]) == data:
                return triangular[i:i+j+1]
            i += 1

    return []

------------------------------------------------------------------

def pbs(cond, start=0):
    """last int after start satisfying cond
    Precondition: cond(n)=>cond(n-1) & cond(start) & exists n>start not cond(n)
    Complexity: max. 2*ld(result-start), calls cond on distinct numbers only"""
    step = 1
    while cond(start + step): step <<= 1
    start += step >> 1
    step >>= 2
    while step:
        if cond(start + step): start += step
        step >>= 1
    return start

def checkio(number):
    for l in range(pbs(lambda l: 6*number > l**3 - l), 0, -1):
        k = round((2*number/l + 1/3 - l**2/12)**.5 - l/2)
        if 6*number == 3*k*l*(k + l) + l**3 - l:
            return [j*(j + 1)//2 for j in range(k, k+l)]
    else: return []

